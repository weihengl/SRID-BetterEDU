#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project:server');


/**
 * Get port from environment and store in Express.
 */




/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var ans;
const port = process.env.PORT || 3000;
app.set('port', port);
const server = app.listen(port,()=> console.log('Listening on '+port));
var io = require('socket.io')(server);
io.sockets.on('connection', (socket) => {

  socket.on('move', message => {
    console.log(message.x);
    console.log(message);
    socket.broadcast.emit("move",message);
  });
  socket.on('down', message => {
    console.log(message.x);
    console.log(message);
    socket.broadcast.emit("down",message);
  });
  socket.on("clean",msg=>{
    socket.broadcast.emit("clean","");
  });
  socket.on("guess",guess=>{
    if(guess != ans){
      socket.emit("fail","");
    }
    else{
      io.sockets.emit("success","");
    }
  });
  socket.on("giveUp",(data)=>{
    io.sockets.emit("giveUp","");
  });
})

app.get('/game/',(req,res,next)=>{
  res.render('game');
});

app.post('/game/',(req,res,next)=>{
  var body = "";
  req.on('data',function(data){
    body += data;
  });
  req.on('end',function(){
    res.writeHeader(200,{
      'Content-Type':'text/plain',
      'Access-Control-Allow-Origin':"*"
    });
    console.log(body);
    res.write(body);
    res.end();
  })
});

app.post('/game/answer',(req,res,next)=>{
  req.on('data',function(data){
    ans = data+"";
    return res.status(201).send("an");
  });
});
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
